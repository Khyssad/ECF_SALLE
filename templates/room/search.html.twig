{# templates/room/search.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Search Rooms{% endblock %}

{% block body %}
    <h1 class="text-3xl font-bold mb-6">Search Rooms</h1>

    {{ form_start(form, {'attr': {'class': 'mb-8'}}) }}
        {# ... render form fields ... #}
        <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Search</button>
    {{ form_end(form) }}

    {% if rooms is not empty %}
        <h2 class="text-2xl font-bold mb-4">Search Results</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {% for room in rooms %}
                <div class="bg-white shadow rounded-lg p-4">
                    <h3 class="text-xl font-semibold">{{ room.name }}</h3>
                    <p>Capacity: {{ room.capacity }}</p>
                    <a href="{{ path('app_room_show', {'id': room.id}) }}" class="text-blue-600 hover:underline">View Details</a>
                </div>
            {% endfor %}
        </div>
    {% elseif rooms is defined %}
        <p>No rooms found matching your criteria.</p>
    {% endif %}
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('search-form');
            const formContainer = document.getElementById('search-form-container');
            const resultsContainer = document.getElementById('results-container');
            const searchButton = document.getElementById('search-button');
            const pageTitle = document.getElementById('page-title');

            form.addEventListener('submit', function (e) {
                e.preventDefault();
                console.log('Form submitted');

                const formData = new FormData(form);
                console.log('Form data:', Object.fromEntries(formData));

                fetch(form.action, {
                    method: form.method,
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                }).then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.text();
                }).then(html => {
                    console.log('Response received');
                    resultsContainer.innerHTML = html;
                    resultsContainer.style.display = 'block';
                    formContainer.style.display = 'none';
                    searchButton.textContent = 'Nouvelle recherche';
                    pageTitle.style.display = 'block';
                }).catch(error => {
                    console.error('Error:', error);
                });
            });

            searchButton.addEventListener('click', function (e) {
                if (formContainer.style.display === 'none') {
                    e.preventDefault();
                    formContainer.style.display = 'block';
                    resultsContainer.style.display = 'none';
                    this.textContent = 'Rechercher';
                }
            });
        });
    </script>
{% endblock %}